name: Build Native Modules

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16]
        include:
          # Add specific configurations for macOS ARM64
          - os: macos-latest
            node: 16
            architecture: arm64
            
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture || 'x64' }}
          
      # Platform-specific setup steps
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install portaudio
          
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          npm install --global --production windows-build-tools
          
      # Install dependencies and build native modules
      - name: Install Dependencies
        run: npm install
        
      # Create prebuilds directory structure
      - name: Prepare Prebuilds Directory
        run: |
          mkdir -p prebuilds/${{ runner.os == 'Windows' && 'win32' || runner.os == 'macOS' && 'darwin' || 'linux' }}-${{ matrix.architecture || 'x64' }}
          
      # Extract built binaries
      - name: Extract Native Modules
        run: |
          # Command to find and copy built .node files to prebuilds directory
          # This will need to be adjusted based on where node-gyp places the binaries
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp -v node_modules/speaker/build/Release/*.node prebuilds/win32-${{ matrix.architecture || 'x64' }}/speaker.node || echo "speaker.node not found"
            cp -v node_modules/node-microphone/build/Release/*.node prebuilds/win32-${{ matrix.architecture || 'x64' }}/node-microphone.node || echo "node-microphone.node not found"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            cp -v node_modules/speaker/build/Release/*.node prebuilds/darwin-${{ matrix.architecture || 'x64' }}/speaker.node || echo "speaker.node not found"
            cp -v node_modules/node-microphone/build/Release/*.node prebuilds/darwin-${{ matrix.architecture || 'x64' }}/node-microphone.node || echo "node-microphone.node not found"
          else
            cp -v node_modules/speaker/build/Release/*.node prebuilds/linux-${{ matrix.architecture || 'x64' }}/speaker.node || echo "speaker.node not found"
            cp -v node_modules/node-microphone/build/Release/*.node prebuilds/linux-${{ matrix.architecture || 'x64' }}/node-microphone.node || echo "node-microphone.node not found"
          fi
        shell: bash
        
      # Upload prebuilds as artifacts
      - name: Upload Prebuilds
        uses: actions/upload-artifact@v3
        with:
          name: prebuilds-${{ runner.os == 'Windows' && 'win32' || runner.os == 'macOS' && 'darwin' || 'linux' }}-${{ matrix.architecture || 'x64' }}
          path: prebuilds/${{ runner.os == 'Windows' && 'win32' || runner.os == 'macOS' && 'darwin' || 'linux' }}-${{ matrix.architecture || 'x64' }}
          
  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          
      - name: Install Dependencies
        run: npm install
        
      # Download all prebuilds
      - name: Download All Prebuilds
        uses: actions/download-artifact@v3
        with:
          path: prebuilds-temp
          
      # Organize prebuilds
      - name: Organize Prebuilds
        run: |
          mkdir -p prebuilds
          cp -R prebuilds-temp/*/* prebuilds/
          ls -la prebuilds/
        
      # Package VSIX
      - name: Package Extension
        run: |
          npm run package
        
      # Upload VSIX
      - name: Upload VSIX
        uses: actions/upload-artifact@v3
        with:
          name: vibe-coder-extension
          path: "*.vsix"
          
      # If this is a tag, create a GitHub release
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            *.vsix
            prebuilds/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 